good-practice: 
 - try to use shoulda-matchers

Data models and associations

 User
  - name
  - last_name
  - email
  - username

 Item
  - title
  - description
  - price
  - order_id

 Order
  - user_id
  - status   { ordered, completed, cancelled, paid }

 OrderItems
  -quntity
  -order_id
  -quntity_id


 Category
  - name
    The categories could be: Vegeraian, Meat, Desserts, sweet, salty, lactose_free, Main, Apetizers...

  Item has_and_belongs_to_many Category

Tests: 
  * Features:
    - User flow creation

  * Model 
    - User record validation 
      - presence: name, last_name
      - username min 2, max 32

Done with the models, now it's time to develop the other features of the app
  unauhtenticated user allowed behaviours
  - User flow, unauthenticated user
  - index page flow
  - change the order item quntity in the order
  - logging in or singing up after creating the order keeps, the order

Authenticated user

  - do everthying unauthenticated user does
  - can log out
  - can see previous orders 
The order show page: 
  - status order 
  - item subtotal
  - link to item description page
  - total order price
  - submission date
  - date of cancelation
  - nav link for cancelled, ordered, completed orders, new

not allowed to: 
  - view another user private data: 
    - cannot see other users orders
  - view admi screens or use admin functionality
  - make themselves admin
  
Admin user 
  allowed to: 
    -1 Create new items
    -1 Modify items
    -1 Create a new Category
    - Assing items to category or remove them from category
    -1 Retire and item from beeing sold and hides from browsing
  
  not allowed to: 

  modify any personal data aside from their own


CHANGING FORM HABTM TO had_many :through

- remove old associations
- drop old table 
- remove old Tests
- create new association 
- modify tests, factories, seeds
- modfiy forms


  Admin-dashboard 
  Show all orders:
    - link to each order
    - Ability to filter orders by status
    - link to transition to a different status
      * link to "cancel" if status ordered or paid
      * link to "mark as paid" if status ordered
      * link to "mark as completed" if status paid
  Acces details of each individual order 
    - date and time
    - purchaser full name and email address
    - for each item in the order 
      * name linked to the itme page
      * quntity
      * price 
      * item subtotal
    - total for the order
    - Order status

Improvments: 

  - Style the website
    * menu page
    * itme description page
    * dashboard
  - Itmes should have at lest one category:
    * When you try to delete the last categorys item a message should appea


Design 
  - Header shared with all pages 
    - Nav bar:
      link and buttons:
        * Sign up button 
        * Sing in button 
  - Footer shared with all pages
    * Nav site
    * Social Nav ( all icons )
    * copyrigth
  - Form Styling 
    * Sign in page
    * Sign up page
  - User oreder page 
    * Table 
  - User past orders page
    * Table
  - Admin dashboard
    * Table

Remove new order from dashboard 
  - change controller logic
  - refactro tests

  Add Features 

  Pick up time: 
    - 12 minutes by default ( this can be edited )
      * add a preparation_time column to item 
      * for drinks the default is 2 minutes
        - before saving the record check the category and set to 2 minutes if drinks
    - Every 6 item that doesn't include drinks add 10 minutes 
      * When adding new order_items, when multiple of 6 add 10 extra minute to the total preparation time
      * Add time_preparation column to orders
      * Add the time preparation after submission
    - Render the extimated time to the user orders page. 
    - Render the extimated time to the dashboard orders page

  Sales:
    !! create a list item page fo easy updating !!
    features: Admin can apply a sale on items or entire groups ( in percentege )
    View: 
      - dashboard order page when sale applied:
        * original price sales percentege and new price
        * also on the new price, to show how much money were saved
    code: 
      Sale Model ( percentege: integer ) has to be a number between 1 and 100("free")
        - has_many: Items and Categories
      Heleper #on_sale? 
      View logic for showing the price change 

    Show page: 
      - should render the old price and the new price
      - 

    Review on Items: 
        Data Model Review
          - title:  string  300 char max  presence
          - body:   string  1000 char max presence
          - rating: number  1 to 5        presence
          Associations: 
            - review belongs_to item
            - item has many reviews 
            - user has many reviews
            - review belongs to user
      - show review on itme page
      - authorizations: 
        * unauhtenticated uses 
          - can only see revieww
          - other action are prohibited 
        * authenticated users
          - can see reviews
          - can create reviews
          - can edite only until 15 minutes after submission
      - Tests: 
        - Review flow: creation, updating ( Those test should cover enough )
        - Request specs for authorizations
    Issue:
      possbility to add order items to cancelled orders SOLVED

    Rccomendations: 
      - Ability to add the same item of the last order
          * Query the the last order and show on the side of 
            page order the order info and the possbility 
            to add the items to the new order
      - Suggested items for each item adde, like amozon
        - look for all order and suggeste combination of items
          procedure: 
            - add item 
            - show 2 suggested items per each item added to a maximum of 8
      - Most popular items
        - make a small list of top 5 items
      - Menu options with discount
        - main + apetizer + dessert

      - edit the menu from the order from the order page
      - remove the menu fro the order page
      
    Search by name Feature
      - Regulr user can search for itmes by name
        * create text input field that send a get request that wil be routeed to the
          items controller and will query the database if the text matches any item title

      - Search through my order for matches in the item name or description
        * query the order that matches the text with the title or the description of each orders items
          that belongs to the current user

      - add serch bar in the menu page
      - add serch bar in the order page

    Admin: 
      - Advance search orders: 
        * drop down for statuses
        * drop down for <, >, = + text for total 
        * drop down for <, >, = + text for date
        * Email address 

    Tidy up the specs  
  
  branch: integrate-stripe
  Stripe integration: 
    Setting up: 
      - Change the price unit to cents
      - Add gem money-rails for a more human redable format
      - Create new Stripe account
      - Add Api Key to cerdentials 
      - Deploy to heroku so that I can work with webhooks
      - Set master.key in production
      - Add endopoint for webhooks
    Checkout session: 
      - add javascript part
      - create checkout controller
      - add ruotes  checkout_create_path, success, cancel
      - create pages: success, cancel
      - add button ( checkout_create_path)     
    Link Users and Product: 
      - link users to stipe cosutmers: 
        - add column: stripe_consumer_id, type: string
        - create callbakc that after creation create a new stripe costumer and store the costumer id to 
          the user table at the stripe_customer_id
       - link products from the database to the stripe products and create prices
        - add column: stripe_products_id, type: string to items table and menus table
        - add prices associated to that product
        - add column: stripe_price_id   
