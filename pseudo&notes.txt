good-practice: 
 - try to use shoulda-matchers

Data models and associations

 User
  - name
  - last_name
  - email
  - username

 Item
  - title
  - description
  - price
  - order_id

 Order
  - user_id
  - status   { ordered, completed, cancelled }

 OrderItems
  -quntity
  -order_id
  -quntity_id


 Category
  - name
    The categories could be: Vegeraian, Meat, Desserts, sweet, salty, lactose_free, Main, Apetizers...

  Item has_and_belongs_to_many Category

Tests: 
  * Features:
    - User flow creation

  * Model 
    - User record validation 
      - presence: name, last_name
      - username min 2, max 32

Done with the models, now it's time to develop the other features of the app
  unauhtenticated user allowed behaviours
  - User flow, unauthenticated user
  - index page flow
  - change the order item quntity in the order
  - logging in or singing up after creating the order keeps, the order

Authenticated user

  - do everthying unauthenticated user does
  - can log out
  - can see previous orders 
The order show page: 
  - status order 
  - item subtotal
  - link to item description page
  - total order price
  - submission date
  - date of cancelation
  - nav link for cancelled, ordered, completed orders, new

not allowed to: 
  - view another user private data: 
    - cannot see other users orders
  - view admi screens or use admin functionality
  - make themselves admin
  
Admin user 
  allowed to: 
  -1 Create new items
  -1 Modify items
  -1 Create a new Category
  - Assing items to category or remove them from category
  -1 Retire and item from beeing sold and hides from browsing
  * create a partial form for the models

  

