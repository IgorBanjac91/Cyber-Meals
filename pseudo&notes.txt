good-practice: 
 - try to use shoulda-matchers

Data models and associations

 User
  - name
  - last_name
  - email
  - username

 Item
  - title
  - description
  - price
  - order_id

 Order
  - user_id
  - status   { ordered, completed, cancelled, paid }

 OrderItems
  -quntity
  -order_id
  -quntity_id


 Category
  - name
    The categories could be: Vegeraian, Meat, Desserts, sweet, salty, lactose_free, Main, Apetizers...

  Item has_and_belongs_to_many Category

Tests: 
  * Features:
    - User flow creation

  * Model 
    - User record validation 
      - presence: name, last_name
      - username min 2, max 32

Done with the models, now it's time to develop the other features of the app
  unauhtenticated user allowed behaviours
  - User flow, unauthenticated user
  - index page flow
  - change the order item quntity in the order
  - logging in or singing up after creating the order keeps, the order

Authenticated user

  - do everthying unauthenticated user does
  - can log out
  - can see previous orders 
The order show page: 
  - status order 
  - item subtotal
  - link to item description page
  - total order price
  - submission date
  - date of cancelation
  - nav link for cancelled, ordered, completed orders, new

not allowed to: 
  - view another user private data: 
    - cannot see other users orders
  - view admi screens or use admin functionality
  - make themselves admin
  
Admin user 
  allowed to: 
    -1 Create new items
    -1 Modify items
    -1 Create a new Category
    - Assing items to category or remove them from category
    -1 Retire and item from beeing sold and hides from browsing
  
  not allowed to: 

  modify any personal data aside from their own


CHANGING FORM HABTM TO had_many :through

- remove old associations
- drop old table 
- remove old Tests
- create new association 
- modify tests, factories, seeds
- modfiy forms


  Admin-dashboard 
  Show all orders:
    - link to each order
    - Ability to filter orders by status
    - link to transition to a different status
      * link to "cancel" if status ordered or paid
      * link to "mark as paid" if status ordered
      * link to "mark as completed" if status paid
  Acces details of each individual order 
    - date and time
    - purchaser full name and email address
    - for each item in the order 
      * name linked to the itme page
      * quntity
      * price 
      * item subtotal
    - total for the order
    - Order status

Improvments: 

  - Style the website
    * menu page
    * itme description page
    * dashboard
  - Itmes should have at lest one category:
    * When you try to delete the last categorys item a message should appea


Design 
  - Header shared with all pages 
    - Nav bar:
      link and buttons:
        * Sign up button 
        * Sing in button 
  - Footer shared with all pages
    * Nav site
    * Social Nav ( all icons )
    * copyrigth
  - Form Styling 
    * Sign in page
    * Sign up page
  - User oreder page 
    * Table 
  - User past orders page
    * Table
  - Admin dashboard
    * Table

Remove new order from dashboard 
  - change controller logic
  - refactro tests

  Add Features 

  Pick up time: 
    - 12 minutes by default ( this can be edited )
      * add a preparation_time column to item 
      * for drinks the default is 2 minutes
        - before saving the record check the category and set to 2 minutes if drinks
    - Every 6 item that doesn't include drinks add 10 minutes 
      * When adding new order_items, when multiple of 6 add 10 extra minute to the total preparation time
      * Add time_preparation column to orders
      * Add the time preparation after submission
    - Render the extimated time to the user orders page. 
    - Render the extimated titme to the dashboard orders page

